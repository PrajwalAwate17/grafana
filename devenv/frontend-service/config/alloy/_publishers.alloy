prometheus.relabel "publish_metrics" {
	rule {
		action       = "replace"
		target_label = "instance"
		replacement  = constants.hostname
	}

	forward_to = [prometheus.remote_write.tilt_prom.receiver]
}

loki.relabel "publish_logs" {
	rule {
		action       = "replace"
		target_label = "instance"
		replacement  = constants.hostname
	}

	forward_to = [loki.write.tilt_loki.receiver]
}

otelcol.processor.transform "publish_traces" {
	error_mode = "ignore"

	trace_statements {
		context    = "resource"
		statements = [
      string.format(`set(attributes["instance"], "%s")`, constants.hostname),
		]
	}

	output {
		traces = [otelcol.exporter.otlp.tilt_tempo.input]
	}
}

pyroscope.relabel "publish_profiles" {
	rule {
		action       = "replace"
		target_label = "instance"
		replacement  = constants.hostname
	}

	forward_to = [pyroscope.write.tilt_pyroscope.receiver]
}


//
// 'Outputs' that send stuff to the databases
//
prometheus.remote_write "tilt_prom" {
	endpoint {
		url = "http://prometheus:9090/api/v1/write"
	}
}

loki.write "tilt_loki" {
	endpoint {
		url = "http://loki:3100/loki/api/v1/push"
	}
}

otelcol.exporter.otlp "tilt_tempo" {
	client {
		endpoint = "tempo:4317"
    tls {
      insecure = true
      insecure_skip_verify = true
    }
	}
}

pyroscope.write "tilt_pyroscope" {
  // Send metrics to a locally running Pyroscope instance.
  endpoint {
    url = "http://pyroscope:4040"
  }
}